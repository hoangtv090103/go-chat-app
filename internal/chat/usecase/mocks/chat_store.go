// Code generated by MockGen. DO NOT EDIT.
// Source: chat_usecase.go
//
// Generated by this command:
//
//	mockgen -source=chat_usecase.go -destination=./mocks/chat_store.go
//

// Package mock_chatusecase is a generated GoMock package.
package mock_chatusecase

import (
	chatdomain "go-chat-app/internal/chat/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatMessageRepository is a mock of ChatMessageRepository interface.
type MockChatMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageRepositoryMockRecorder
}

// MockChatMessageRepositoryMockRecorder is the mock recorder for MockChatMessageRepository.
type MockChatMessageRepositoryMockRecorder struct {
	mock *MockChatMessageRepository
}

// NewMockChatMessageRepository creates a new mock instance.
func NewMockChatMessageRepository(ctrl *gomock.Controller) *MockChatMessageRepository {
	mock := &MockChatMessageRepository{ctrl: ctrl}
	mock.recorder = &MockChatMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageRepository) EXPECT() *MockChatMessageRepositoryMockRecorder {
	return m.recorder
}

// GetMessagesByRoom mocks base method.
func (m *MockChatMessageRepository) GetMessagesByRoom(roomID uint) ([]chatdomain.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByRoom", roomID)
	ret0, _ := ret[0].([]chatdomain.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByRoom indicates an expected call of GetMessagesByRoom.
func (mr *MockChatMessageRepositoryMockRecorder) GetMessagesByRoom(roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByRoom", reflect.TypeOf((*MockChatMessageRepository)(nil).GetMessagesByRoom), roomID)
}

// Store mocks base method.
func (m *MockChatMessageRepository) Store(message *chatdomain.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockChatMessageRepositoryMockRecorder) Store(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockChatMessageRepository)(nil).Store), message)
}
