// Code generated by MockGen. DO NOT EDIT.
// Source: room_usecase.go
//
// Generated by this command:
//
//	mockgen -source=room_usecase.go -destination=./mocks/room_store.go
//

// Package mock_chatusecase is a generated GoMock package.
package mock_chatusecase

import (
	context "context"
	chatdomain "go-chat-app/internal/chat/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRoomUseCase is a mock of IRoomUseCase interface.
type MockIRoomUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIRoomUseCaseMockRecorder
}

// MockIRoomUseCaseMockRecorder is the mock recorder for MockIRoomUseCase.
type MockIRoomUseCaseMockRecorder struct {
	mock *MockIRoomUseCase
}

// NewMockIRoomUseCase creates a new mock instance.
func NewMockIRoomUseCase(ctrl *gomock.Controller) *MockIRoomUseCase {
	mock := &MockIRoomUseCase{ctrl: ctrl}
	mock.recorder = &MockIRoomUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoomUseCase) EXPECT() *MockIRoomUseCaseMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockIRoomUseCase) CreateRoom(context context.Context, roomName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", context, roomName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockIRoomUseCaseMockRecorder) CreateRoom(context, roomName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIRoomUseCase)(nil).CreateRoom), context, roomName)
}

// GetAllRooms mocks base method.
func (m *MockIRoomUseCase) GetAllRooms(context context.Context) ([]chatdomain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRooms", context)
	ret0, _ := ret[0].([]chatdomain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRooms indicates an expected call of GetAllRooms.
func (mr *MockIRoomUseCaseMockRecorder) GetAllRooms(context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRooms", reflect.TypeOf((*MockIRoomUseCase)(nil).GetAllRooms), context)
}

// GetRoomByName mocks base method.
func (m *MockIRoomUseCase) GetRoomByName(context context.Context, roomName string) (*chatdomain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByName", context, roomName)
	ret0, _ := ret[0].(*chatdomain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByName indicates an expected call of GetRoomByName.
func (mr *MockIRoomUseCaseMockRecorder) GetRoomByName(context, roomName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByName", reflect.TypeOf((*MockIRoomUseCase)(nil).GetRoomByName), context, roomName)
}
